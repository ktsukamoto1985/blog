<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>living in retirement</title>
    <link>https://ktsukamoto1985.github.io/blog/</link>
    <description>Recent content on living in retirement</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 16 Jan 2021 22:13:00 +0900</lastBuildDate><atom:link href="https://ktsukamoto1985.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>道楽の世界史3 イングランド七王国の成立</title>
      <link>https://ktsukamoto1985.github.io/blog/2021/01/16/heptarchy/</link>
      <pubDate>Sat, 16 Jan 2021 22:13:00 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2021/01/16/heptarchy/</guid>
      <description>（ムンディ先生の世界史20話プロジェクトを見て自分なりにメモしているもの）
グレートブリテン島に移動したゲルマン民族 　ゲルマン民族の大移動の中で、アングロ人、サクソン人、ジュート人の3部族からなるアングロ・サクソン人がグレートブリテン島に移住し、先住のケルト人（ここでは島のケルト人のことを指す）であるブリトン人の居住エリアを奪いながら勢力を拡大した。グレートブリテン島への移住は449年とされる。アングロ人は現在のデンマーク南部、サクソン人(独：Sachsen)は現在のドイツ北西部のニーダーザクセン(独：Niedersachsen)地方、ジュート人(英：Jutes)はユトランド半島(英：Jutland)を現住地とした。先住のブリトン人は南西部のコーンウォール地方や、一部は海を渡りブルターニュ地方に移住した。 アングロ人はノーサンブリア王国、マーシア王国、イースト・アングリア王国を、サクソン人はエセックス王国、サセックス王国、ウェセックス王国という男子高校生が実に喜びそうな名前の王国を、ジュート人はケント王国を建国した。実際にはより多くの王国が興亡していたが、代表的なこれら7つの王国を総称してアングロサクソン七王国（ヘプターキー）と呼ぶ。
七王国の統一 　これらの王国の中からウェセックス王国が強大化し、エグバート王のもとで七王国を統一。829年にイングランド王国が成立した。しかしこのイングランド王国はまだ確立されたものではなく、それぞれの王国は引き続き存続した。この時代のグレートブリテン島には、ノルマン人の一派であるデーン人がたびたび襲撃しており、これらの七王国は襲撃に対応する必要があった。9世紀以降のデーン人は襲撃から定住に目的を変更し、七王国の中には滅ぼされる国も出てきた。
古英語 　現在の英語の歴史をたどると、この頃は古英語の時期に当たる。古英語は名詞が格や性によって屈折し、動詞も複雑に活用した。これらはインド・ヨーロッパ語族の言語には共通してみられる特徴である。
参考に書籍を読んだ  『詳説世界史研究』木村靖二、岸本未緒、小松久男編 『はじめての英語史』堀田隆一  </description>
    </item>
    
    <item>
      <title>道楽の世界史2 西ローマ帝国の滅亡</title>
      <link>https://ktsukamoto1985.github.io/blog/2021/01/13/ostrogoths/</link>
      <pubDate>Wed, 13 Jan 2021 22:14:34 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2021/01/13/ostrogoths/</guid>
      <description>（ムンディ先生の世界史20話プロジェクトを見て自分なりにメモしているもの）
ヴァンダル王国とガイセリック 　ヴァンダル人の王であるガイセリックは、イベリア半島からジブラルタルを越えアフリカに移動しカルタゴを占領、ヴァンダル王国を建国する。肥沃なアフリカを得たヴァンダル王国は度々イタリアへ侵入し、455年にはローマの略奪を行う。しかし、ガイセリックの死後は衰え、ビザンツ帝国のユスティニアヌス帝により滅ぼされる。
ブルグント王国 　この時代にブルグント人はガリア南部にブルグント王国を建国する。首都は当初ヴォルムス、後にはリヨンに置かれた。ブルグント王国のあった地域は、ブルゴーニュという地名として現在も名を残している。また、『ニーベルンゲンの歌』のモデルとしても知られている。
フン人の王アッティラの時代 　フン人はアッティラ王の時代に勢力を強大化させる。451年にローマ帝国とフランク人・ゴート人は連合し、カタラヌウムの戦いでアッティラを破ることに成功する。しかし翌年もアッティラ率いるフン人はイタリアに侵入しローマに迫るが、ローマ教皇レオ1世の説得により撤退する。その翌年にアッティラは死去し、強力なリーダーを失ったフン人の勢力は急速に縮小していった。
西ローマ帝国の滅亡と東ゴート王国 　この混乱の中、ゲルマン人の傭兵隊長オドアケルによって西ローマ帝国の皇帝ロムルス・アウグストゥスは退位させられる。オドアケルは皇帝位を東ローマ帝国の皇帝ゼノンに返還し、自らはイタリアの領主となった。オドアケルとゼノンの関係は良好であったが、徐々に関係が悪化し、最終的には東ローマ方の東ゴート人テオドリックによって滅ぼされる。テオドリックは西ローマ帝国の末期の皇帝が本拠地としたラヴェンナを都とする東ゴート王国を建国した。東ゴート王国は後にビザンツ帝国のユスティニアヌス帝により滅ぼされる。
西ローマ帝国は形の上では滅亡したが、ローマの統治機構はオドアケル、東ゴート王国の時代も維持されたとwikipediaには記載されている。
ランゴバルド王国 　ユスティニアヌス帝は東ゴート王国を滅ぼす際にゲルマン人の一派であるランゴバルド人の協力を得ていた。しかし、ユスティニアヌス帝の死後財政が逼迫したビザンツ帝国は次々と獲得した領地を失うことになる。イタリアにおいても例外でなく、ランゴバルド人は北イタリアに侵入するとパヴィアを都とするランゴバルド王国を建国した。その後、ビザンツ帝国がイタリア支配の拠点としたラヴェンナ総督府も奪い、北イタリアからビザンツ帝国の勢力を駆逐した。 ランゴバルト人は他のゲルマン人と違い、ローマの影響力があまり及んでいなかったため、民族的な対立は長く続いた。とはいえ徐々にローマとも同化していったことは間違いない。
このページを参考にした ランゴバルド人／ランゴバルド王国（世界史の窓）</description>
    </item>
    
    <item>
      <title>Jupyter LabでPDF出力できなかった時</title>
      <link>https://ktsukamoto1985.github.io/blog/2021/01/11/jupyterlab/</link>
      <pubDate>Mon, 11 Jan 2021 23:18:33 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2021/01/11/jupyterlab/</guid>
      <description>なぜかできなかったので調べたら、以下の記事を見つけた。
Jupyter notebookからpdfに変換する[mac]
https://qiita.com/yasudadesu/items/7b4edec4498e425bf50c
記事を参考に、以下のコマンドを叩いてみる。
brew install pandoc brew install basictex とりあえずこれで動いたのでよしとする。</description>
    </item>
    
    <item>
      <title>道楽の世界史1 ゲルマン民族の大移動</title>
      <link>https://ktsukamoto1985.github.io/blog/2021/01/11/visigoths/</link>
      <pubDate>Mon, 11 Jan 2021 20:44:51 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2021/01/11/visigoths/</guid>
      <description>（ムンディ先生の世界史20話プロジェクトを見て自分なりにメモしているもの）
ゲルマン民族とはどのような民族であったか 　古代ヨーロッパから中世ヨーロッパに移るきっかけとなったイベントは、375年に起きたゲルマン民族の大移動である。これを皮切りにヨーロッパにはゲルマン系民族が大挙して移動してくることになる。そもそもゲルマン人はローマ帝国のすぐ外側に元から住んでおり、元はバルト海沿岸が原住地である。その後、ヨーロッパ大陸先住のケルト人を圧迫しながら東ヨーロッパ一帯に進出していった。ここでのケルト人は大陸のケルトのことを指している。
　ゲルマン人はローマ帝国と時に戦果も交えている。その当時のことを記録した書物として、カエサルの『ガリア戦記』やタキトゥスの『ゲルマニア』がある。その後はローマ帝国の傭兵となる者や、コロヌス（小作人）となる者も現れるなど、平和的にローマ帝国内に移住する人も見られた。
ゲルマン民族の移動の始まり 　そのようなゲルマン民族の社会に変革が訪れたのが375年。東方からフン人が西進し、黒海の北岸に居住していた東ゴート人を完全に飲み込んでしまう。周辺の諸部族はフン人の勢いを恐れて西への移動を始め、ドナウ川を横断しローマ帝国の領内に移動する。これがゲルマン民族の大移動と呼ばれるイベントとなる。こうしてみると、決してゲルマン民族はローマ帝国を侵略するために西進したわけではない事がわかる。事実、最初はローマ帝国側もゲルマン民族に居住地を与えるなどの対応をとっていたようである。しかし、西ゴート族・東ゴート族は与えられた場所で略奪を始めるようになり（ローマ帝国が十分な支援をしなかったせいでそうせざるを得なかったという話でもある）、これを鎮圧しようとしたローマの東の正帝ウァレンスがアドリアノープルの戦いで戦死する事になる（378年）。これにより、新たな東の正帝としてテオドシウスが即位する。
西ゴート王国 　ゲルマン民族の中でいち早く王国を築いたのは西ゴート人とされる。西ゴートの最初の王となったアラリックは元々ローマに臣従しており、正規軍として扱われていた。しかし、ローマからの扱いに不満を覚えローマから離反する。アラリックのローマ襲撃はテオドシウス帝によって重用されたヴァンダル人の血を引くローマ将軍スティリコによって毎回阻まれる。しかし、ホノリウス帝によってスティリコが処刑されるとアラリックはローマを略奪（410年）。金目のものはたいてい奪われ、この時に皇帝ホノリウスの妹は捕虜として連れ去られてしまう。この妹がのちの西ゴート王と結婚したことにより、西ゴートとローマの間に和平が成立し、ガリア南部からイベリア半島を勢力範囲とする西ゴート王国がトロサを都として成立した。西ゴート王国はのちにフランク王国のクローヴィスに敗れ、領地をイベリア半島のみに縮小し、トレドに都をうつす。最終的にはウマイヤ朝により滅ぼされる。</description>
    </item>
    
    <item>
      <title>QGISで基盤地図情報を表示する(2)</title>
      <link>https://ktsukamoto1985.github.io/blog/2021/01/03/gdal/</link>
      <pubDate>Sun, 03 Jan 2021 19:33:56 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2021/01/03/gdal/</guid>
      <description>前回記事で無事に変換できると思っていたが、いざやってみると画像変換時点でつまずいてしまった。どうやらgdalをpythonで使えるようにするため、QGISだけではなくきちんとインストールする必要がありそうだった。
検索の結果、以下のページが出た。
悪魔のGDAL for OSX
https://qiita.com/harmegiddo/items/fa7ca59e636489990edb　ひとまずHomebrewでgdalをインストールする。
brew install gdal この結果、夥しい量の依存関係とともにgdalがインストールされる。あまりに多かったので少し頭を抱える。
その後gdal-config --versionを確認すると、きちんとインストールされていることが確認出来た。そのため、次の手順である「pipでインストールしたことにする」を実施した。以下のコマンドは元記事のコピーであり、自分がやったことを忘れずに記録するためのものである。
pip install GDAL==$(gdal-config --version | awk -F&amp;#39;[.]&amp;#39; &amp;#39;{print $1&amp;#34;.&amp;#34;$2}&amp;#39;) ここまで実施したところ、問題なく前回記事のgeotiff変換が行えることを確認した。
ところで、GISで色々と点を打ってみると新たな発見があって面白い。
 城などプロットしてみる   標高データを重ねてみると、安芸武田氏の佐東銀山城も熊谷氏の三入高松城も山上に築かれていることがわかる。対して香川氏の八木城は川沿いに見える。ストリートビューを見るときちんとこの辺りも小高い丘になっていることがわかるので、使用した数値標高モデルが5mではなく10mメッシュだったことや、色分けの段階が粗かったことなどが理由として考えられる。</description>
    </item>
    
    <item>
      <title>QGISで基盤地図情報を表示する(1)</title>
      <link>https://ktsukamoto1985.github.io/blog/2020/12/31/qgis-dem/</link>
      <pubDate>Thu, 31 Dec 2020 18:48:00 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2020/12/31/qgis-dem/</guid>
      <description>多分何回かかかりそうなので。ひとまずは数値標高モデルから
数値標高モデルのダウンロード 基盤地図情報のダウンロードページからダウンロードする。
https://fgd.gsi.go.jp/download/menu.php
geotiffに変換する やり方を調べたけれど、これが一番やりやすかった。
Pythonを用いた基盤地図情報 数値標高データのgeotiff変換
https://qiita.com/HidKamiya/items/66b1d98503301446460c
コマンドとしてpython zdem2tif.pyのあとに続ける引数のファイル名を一括で生成したかったので、ちょっと頑張ってシェルスクリプトを書いた。
ls | grep DEM10B | xargs echo -n &amp;gt; filelist.txt 得られたファイルリストをそのまま貼り付けた。本当は一気に.shで書き上げてしまいたかったけど時間切れ。いつか考える。
QGISに読み込ませる geotiffに変換したラスタデータを読み込ませて表示させてみた。
 ラスタデータを読み込ませた   なんとなくグリッドが入っているように見えるが、これはラスタデータの切れ目を表している。おそらくデータごとに最大値と最小値でスケーリングさせているものと思われる。色別標高図を作る時は、これらを統合してしまった方が楽なので統合を行う。メニューの[ラスタ] &amp;gt; [その他] &amp;gt; [結合(gdal_merge)]で結合を行うことができる。ここができなかったせいでmacOSの再インストールを敢行することになった。
 ラスタデータを結合した   ここまできてようやく色別標高図を作成できる。レイヤのプロパティからレンダリングタイプを単バンド擬似カラー、カラーランプをSpectralに設定したものが以下の通り。
 色別標高図の作成   国土数値情報のベクタデータを読み込ませて重ねてみた。
 色別標高図の作成   色々付け足していけば、しばらく遊べそう。</description>
    </item>
    
    <item>
      <title>macの再設定</title>
      <link>https://ktsukamoto1985.github.io/blog/2020/12/30/clean-install-01/</link>
      <pubDate>Wed, 30 Dec 2020 22:52:14 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2020/12/30/clean-install-01/</guid>
      <description>macをクリーンインストールしたので、やったことを記す。
環境 macOS Big Sur 11.1
Apple Storeからインストールした  Limechat  サイトからインストールした  Chrome Vivaldi Skype Spotify zoom Microsoft 365 Google Drive Slack Arduino QGIS Dropbox  サイトからzipをダウンロードした  Atom  Homebrew  Homebrew（まずはここから） go hugo zlib python mecab mecab-ipadic  Pythonは諦めた システム標準のPythonを使うことは具合が悪いので、Homebrew経由で3.9.1をインストール。その後、.zshrcの中身を以下のように書き換える。
export LDFLAGS=&amp;#34;-L/usr/local/opt/zlib/lib&amp;#34; export CPPFLAGS=&amp;#34;-I/usr/local/opt/zlib/include&amp;#34; alias python=/usr/local/bin/python3 alias pip=/usr/local/bin/pip3.9 その後、sourceで読み込み直した後にpipでnumpy, scipy, matplotlib, seaborn, pandas, sklearn, jupyterlabをインストールする。蛇足ながら
$ pip install numpy scipy matplotlib seaborn pandas sklearn jupyterlab mecab-python3 ひとまずここで動くようになった。pyenvはあまりPythonのバージョンを変化させる必要がないことからスルーする。poetryは導入したいかもしれない。</description>
    </item>
    
    <item>
      <title>サイリウムに反応して推しがこっちを向いてくれる</title>
      <link>https://ktsukamoto1985.github.io/blog/2020/12/26/o-re-no-nenecha-n/</link>
      <pubDate>Sat, 26 Dec 2020 22:36:00 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2020/12/26/o-re-no-nenecha-n/</guid>
      <description>前置き この記事はAIIT(産業技術大学院大学) Advent Calendar 2020、3日目の記事です。
やるって主催には連絡しておきながらまったくネタが浮かばずこの体たらく。
動機 昔、地下アイドルを熱心に追いかけていたことがあった。
普段は後方彼氏面でライブを見ていたけど、やっぱり推しからのレスはうれしいもの。
なので、推しにレスしてもらえるシステムを作った。
成果物 サイリウムを振ると、推しのアクキーが振り向いてレスをくれる。
写真で見ていただくのが手っ取り早いと思うので。
 写真1 普段は横を向いている    写真2 サイリウムを近づけるとこっちを向いてくれる   原理 なんのことはない、光センサとサーボモータをArduinoに接続し、光の強さによってサーボモータの角度を変更しているだけのこと。
Arduinoのコードもシンプル。
#include &amp;lt;Servo.h&amp;gt; Servo sv; void setup() { Serial.begin(9600); sv.attach(11); } void loop() { // put your main code here, to run repeatedly:  int val = analogRead(3); int angle = min((val-300)*3/4, 90); if(angle &amp;lt; 0){ angle = 0; } Serial.println(val); sv.write(angle); delay(333); } サーボモータが0度から90度の間を30度刻みで動くように角度を適当に調整した。</description>
    </item>
    
    <item>
      <title>場所</title>
      <link>https://ktsukamoto1985.github.io/blog/2020/12/25/first-stage/</link>
      <pubDate>Fri, 25 Dec 2020 21:41:21 +0900</pubDate>
      
      <guid>https://ktsukamoto1985.github.io/blog/2020/12/25/first-stage/</guid>
      <description>github pagesの練習を兼ねて作ってみました。</description>
    </item>
    
  </channel>
</rss>
